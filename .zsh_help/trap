trap [ arg ] [ sig ... ]
       arg  is  a  series  of  commands (usually quoted to protect it from immediate evaluation by the shell) to be read and 
       receives any of the signals specified by one or more sig args.  Each sig can be given as a number, or as the name of a
       without the string SIG in front (e.g. 1, HUP, and SIGHUP are all the same signal).

       If arg is `-', then the specified signals are reset to their defaults, or, if no sig args are present, all traps are r

       If arg is an empty string, then the specified signals are ignored by the shell (and by the commands it invokes).

       If  arg  is omitted but one or more sig args are provided (i.e.  the first argument is a valid signal number or name),
       as if arg had been specified as `-'.

       The trap command with no arguments prints a list of commands associated with each signal.

       If sig is ZERR then arg will be executed after each command with a nonzero exit status.  ERR is an alias for ZERR on  
       SIGERR signal (this is the usual case).

       If  sig  is  DEBUG then arg will be executed before each command if the option DEBUG BEFORE CMD is set (as it is by de
       command.  Here, a `command' is what is described as a `sublist' in the shell grammar, see the section SIMPLE COMMANDS 
       misc(1).   If  DEBUG BEFORE CMD  is set various additional features are available.  First, it is possible to skip the 
       the option ERR EXIT; see the description of the ERR EXIT option in zshoptions(1).  Also, the shell parameter  ZSH DEBU
       string  corresponding  to the command to be executed following the trap.  Note that this string is reconstructed from 
       may not be formatted the same way as the original text.  The parameter is unset after the trap is executed.

       If sig is 0 or EXIT and the trap statement is executed inside the body of a function, then the command arg is  execute
       completes.   The  value of $? at the start of execution is the exit status of the shell or the return status of the fu
       is 0 or EXIT and the trap statement is not executed inside the body of a function, then the command arg is executed  w
       nates.

       ZERR,  DEBUG,  and  EXIT  traps  are  not executed inside other traps.  ZERR and DEBUG traps are kept within subshells
       reset.

       Note that traps defined with the trap builtin are slightly different from those defined as `TRAPNAL () { ... }', as th
       function  environment  (line  numbers,  local variables, etc.) while the former use the environment of the command in 
       For example,

              trap 'print $LINENO' DEBUG

       will print the line number of a command executed after it has run, while

              TRAPDEBUG() { print $LINENO; }

       will always print the number zero.

       Alternative signal names are allowed as described under kill above.  Defining a trap under either name causes any trap
       name to be removed.  However, it is recommended that for consistency users stick exclusively to one name or another.
