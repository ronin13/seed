#!/bin/zsh
HIST="$HOME/.mplayer.hist"
AUX_INVO=0
POSITION=0
maxplayers=1
network=0
randnum=$((${RANDOM}%${maxplayers}))
MPSOCKET="/tmp/mplayer/$randnum.fif"
if [[ !  -e $MPSOCKET ]] ;then
    mkfifo $MPSOCKET
    ln -sf $MPSOCKET /tmp/mplayer.fif
fi

mkdir -p /tmp/mplayer
if [[ $0 == *mplayeraux ]];then
    AUX_INVO=1
fi
exec &>>|/tmp/mplayer.log


touch /tmp/mplayer.log
pwdir=$(pwd)

fixedvo=1
typeset -A vo_map
vo_map=(1 fixed-vo 0 nofixed-vo)

pushd $HOME
${=LOCK}/mplayer.$randnum /usr/bin/mplayer -$vo_map[$fixedvo] -msglevel all=4 -slave -idle -input file=$MPSOCKET -input conf=$HOME/.mplayer/input.conf.mine  &!
popd

pecho(){
    msg="$1"
    file="$2"
    /bin/echo "$msg" >| $file &
    sleep 0.1
    echo < $file
}

# curl for non-strict url parsing ;)
isurl () {
        url="$@"
        curl -I -s "$url" &>/dev/null || return 1
        return 0
}


check_pattern(){
        pecho "get_property filename" $1
        if tail -2 /tmp/mplayer.log | /bin/grep  'ANS_filename' | /bin/grep -v grep ;then
            pecho "get_property pause" $1
            if tail -2 /tmp/mplayer.log | /bin/grep  'ANS_pause=no' | /bin/grep -v grep ;then
                retval=0
                return 0
            fi
            retval=2
        fi
        [[ -z $retval ]] && retval=1
        return 1
}


parse(){
if [[ -z "$1" ]];then
      fnum=$(awk '{ print NR" "$0 }' $HIST | cut -d ":" -f 1 | uniq -f 1 | tac | ${=DMENU})
      [[ -z "$fnum" ]] && exit
      num=$(echo "$fnum" | cut -d " " -f 1)
      FILE=$(head -${num} $HIST | tail -1 | cut -d ":" -f 1)

      if [[ $fnum == *: ]];then
          name="$(cut -d ' ' -f 1 <<< $FILE)"
          POSITION="$(grep $name $HIST | tail -1 | cut -d ':' -f 2)"
      fi

else
    if isurl "$(tr -d '.' <<< $1)";then # Fix /a/b/c/d type
        FILE="$1"
        network=1
    else
        if [[ "$@" == /* ]];then
            prefix=
        else
            prefix="$pwdir/"
        fi
        FILE="${prefix}$@"
    fi
fi
retval=$FILE
}

preplay(){
    mpc pause &>/dev/null
    ln -sf $MPSOCKET /tmp/mplayer.fif || exit 1
}

check_status(){
if [[ $fixedvo == 1 ]];then
    pidof mplayer || return 0
    echo >>| /tmp/mplayer.log
    retval=1
    for ff in  /tmp/mplayer/*.fif;do
        if check_pattern $ff;then
            return $retval
        fi
    done
    return $retval
else
    if xdotool search --class mplayer;then
        return 1
    else
        return 0
    fi
fi
}

aux(){
case $1 in
 status)
     check_status
     return $?
    ;;
 clean)
    rm /tmp/mplayer/* 2>/dev/null
    rm /tmp/mplayer.fif 2>/dev/null
    killall -9 mplayer 2>/dev/null
    rm /tmp/locks/mplayer* 2>/dev/null
    mv /tmp/mplayer.log /tmp/.mplayer.log
    exit
    ;;
 pause)
    pecho 'pause' $MPSOCKET
    ;;
 snext)
     pecho 'seek +10' $MPSOCKET 
     ;;
 sprev)
     pecho 'seek -10' $MPSOCKET 
     ;;
 pnext)
     pecho "pt_step 1"  $MPSOCKET
     ;;
 pprev)
     pecho "pt_step -1"  $MPSOCKET
     ;;
 stop)
    wheret
    echo "$retval" >>| ~/.mplayer.hist
    pecho 'stop'  $MPSOCKET
    echo "#STOPPED ${file}" >>| /tmp/mplayer.log
    ;;
   *)
       return 1
esac
}

wheret(){
    pecho 'get_time_pos'  $MPSOCKET
    pecho 'get_property path'  $MPSOCKET
    sleep 3
    LOG="tail -5 /tmp/mplayer.log"
    position=$(${=LOG} | /bin/grep ANS_TIME_POSITION | head -1 |  cut -d "=" -f 2)
    file=$(${=LOG} | /bin/grep ANS_path | head -1 |  cut -d "=" -f 2)
    retval="$file:$position"
}

if [[ $0 == *mplayeraux ]];then
    aux $@
    exit $?
fi

parse $@
FILE=$retval
preplay

pecho "loadfile \"$FILE\" 2"  /tmp/mplayer.fif

check_status

# Queue or play
if [[ $? == 0 ]];then
    notify-send "Player" "^i(/home/raghavendra/.notify-icons/mplayer.xpm) ^fg(red)FILE:^fg() $FILE:t queued"
else
    if [[ ! $POSITION == 0* ]];then
        sleep 1
        pecho "set_property time_pos $POSITION"  $MPSOCKET
        notify-send "Player" "^i(/home/raghavendra/.notify-icons/mplayer.xpm) ^fg(red)FILE:^fg() $FILE:t ^fg(green)POSITION:^fg() ${POSITION:-0:0}"
    else
        notify-send "Player" "^i(/home/raghavendra/.notify-icons/mplayer.xpm) ^fg(red)FILE:^fg() $FILE:t"
    fi
fi
/bin/echo "mplayer $FILE" >>| ~/.current
# vim: set foldmethod=marker:
